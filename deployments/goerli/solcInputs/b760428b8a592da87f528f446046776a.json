{
    "language": "Solidity",
    "sources": {
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
        },
        "contracts/errors.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nerror NotOwner();\nerror CallError();\nerror NotEnoughSent();\n"
        },
        "contracts/FundMe.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"./PriceConverter.sol\";\nimport \"./errors.sol\";\n\n// error NotOwner();\n// error CallError();\n// error NotEnough();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    // uint256 public minimumUsd = 50 * 1e18;\n    // gas to deploy: 809,984\n    uint256 public constant MINIMUMUSD = 50 * 1e18;\n    // gas to deploy: 790,382\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    // address public owner;\n    // gas to deploy: 790,382\n    address public immutable i_owner;\n    // gas to deploy: 766,827\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        // msg.vaue becomes first parameter for getConversionRate()\n        // require(msg.value.getConversionRate() >= MINIMUMUSD, \"Not enough contribution\");\n        // 716,658\n        if (msg.value.getConversionRate(priceFeed) < MINIMUMUSD) {\n            revert NotEnoughSent();\n        } // 687,880\n        addressToAmountFunded[msg.sender] += msg.value;\n        funders.push(msg.sender);\n    }\n\n    function withdraw() public onlyOwner {\n        for (\n            uint256 fundersIndex = 0;\n            fundersIndex < funders.length;\n            fundersIndex++\n        ) {\n            address funder = funders[fundersIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n\n        funders = new address[](0);\n\n        // different ways to withdraw\n        // transfer\n        // msg.sender = address\n        // payable(msg.sender) = payable address\n        // reverts if fails\n        // payable(msg.sender).transfer(address(this).balance);\n\n        // send\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess, \"send error, revert\");\n\n        // call - you can call functions without having ABI\n        // returns two variables dataReturned is array so it needs memory tag\n        // (bool callSuccess, bytes memory dataReturned) = payable(msg.sender).call{ value: address(this).balance }(\"\");\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n\n        // require(callSuccess, \"call error, revert\"); // 741,763\n        if (!callSuccess) {\n            revert CallError();\n        } // 716,646\n    }\n\n    modifier onlyOwner() {\n        // require(msg.sender == i_owner, \"Not Contract Owner!\");\n        // gas to deploy: 766,827\n\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        }\n        // gas to deploy: 741,763\n        _;\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
        },
        "contracts/PriceConverter.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        // ABI\n        // Address price feed Goerli: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        /** \n        function latestRoundData()\n            external\n            view\n            returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n            );\n        **/\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        // );\n        // (uint80 roundId, int256 price, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound) = priceFeed.latestRoundData();\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // price has 8 decimals ie. 118751000000 == 1187.51000000\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(\n        uint256 _ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * _ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": {
            "useLiteralContent": true
        }
    }
}
